package main

import (
	"context"
	"fmt"
	"os"

	"github.com/google/go-github/v68/github"
)

type RepositoryEditReqBody struct {
	has_discussions bool
	has_projects    bool
	has_wiki        bool
}

func FetchAccessToken() string {
	token, ret := os.LookupEnv("TOKEN")
	if ret != true {
		fmt.Println("Failed to fetch GitHub token, please set TOKEN first.")
		// Note that os.Exit() will not call the logics of `defer`
		os.Exit(1)
	}
	return token
}

func IsInitialCommit(repo string, client *github.Client, repoowner string, reponame string) bool {
	// Check commit histories of README.md file and return false if there is other commits
	fmt.Printf(">>> Getting commit history of %s ...\n", repo)

	// https://pkg.go.dev/github.com/google/go-github/github#RepositoriesService.ListCommits
	opt := &github.CommitsListOptions{Path: "./README.md"}
	commits, _, err := client.Repositories.ListCommits(context.Background(), repoowner, reponame, opt)
	if err != nil {
		fmt.Println("Failed to fetch list of commits")
		fmt.Println(err)
		return false
	}

	// ListCommits() result has pagenations by default with 30 from latest
	fmt.Printf("Found %v commits in repo with file %s\n", len(commits), opt.Path)
	if len(commits) != 1 {
		fmt.Println("There are several commits in the repo as below, seems not new repository and need not to initialize.")
		for _, commit := range commits {
			// https://pkg.go.dev/github.com/google/go-github/github#RepositoryCommit
			// https://pkg.go.dev/github.com/google/go-github/github#Commit
			fmt.Printf("commit: [ %s ]\n", commit.Commit.GetMessage())
		}
		return false
	}

	fmt.Println(">>> Checking the latest commit message of README")
	latest := commits[len(commits)-1]
	if latest.Commit.GetMessage() != "Initial commit" {
		fmt.Println("Seems that this repository was not generated by `hwakabh/.github` template, skipped the process")
		fmt.Printf("%s | %s\n", latest.GetSHA(), latest.Commit.GetMessage())
		return false
	}

	return true
}

func UpdateWorkflowPermission(repo string, client *github.Client, repoowner string, reponame string) {
	default_workflow_permission := "write"
	can_approve_pull_request_reviews := true

	permissions := &github.DefaultWorkflowPermissionRepository{
		DefaultWorkflowPermissions:   &default_workflow_permission,
		CanApprovePullRequestReviews: &can_approve_pull_request_reviews,
	}

	_, _, err := client.Repositories.EditDefaultWorkflowPermissions(context.Background(), repoowner, reponame, *permissions)
	if err != nil {
		fmt.Printf("Failed to update default workflow permissions in %s\n", repo)
		fmt.Println(err)
		os.Exit(1)
	}
}

func AddBranchProtectionRule(repo string, client *github.Client, repoowner string, reponame string) {
	rules := &github.ProtectionRequest{
		RequiredStatusChecks: &github.RequiredStatusChecks{
			Strict: true,
			// https://github.com/google/go-github/issues/2467#issuecomment-1250072559
			Checks: &([]*github.RequiredStatusCheck{}),
		},
		RequiredPullRequestReviews: &github.PullRequestReviewsEnforcementRequest{
			DismissStaleReviews:          false,
			DismissalRestrictionsRequest: nil,
			RequireCodeOwnerReviews:      false,
			RequiredApprovingReviewCount: 0,
		},
		EnforceAdmins: false,
		Restrictions:  nil,
	}

	_, _, err := client.Repositories.UpdateBranchProtection(context.Background(), repoowner, reponame, "main", rules)
	if err != nil {
		fmt.Printf("Failed to update branch protection rule in %s\n", repo)
		fmt.Println(err)
		os.Exit(1)
	}
}

func DisablingRepositoryTabs(repo string, client *github.Client, repoowner string, reponame string) {
	rbody := RepositoryEditReqBody{
		false,
		false,
		false,
	}
	_, _, err := client.Repositories.Edit(context.Background(), repoowner, reponame, &github.Repository{
		HasDiscussions: &rbody.has_discussions,
		HasProjects:    &rbody.has_projects,
		HasWiki:        &rbody.has_wiki,
	})
	if err != nil {
		fmt.Printf("Failed to diable repository tabs in %s\n", repo)
		os.Exit(1)
	}

}
