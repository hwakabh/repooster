package main

import (
	"context"
	"fmt"
	"os"

	"github.com/google/go-github/v68/github"
)

func FetchAccessToken() string {
	fmt.Println(">>> Fetching GitHub Personal Access Token ...")
	token, ret := os.LookupEnv("TOKEN")
	if ret != true {
		fmt.Println("Failed to fetch GitHub token, please set TOKEN first.")
		// Note that os.Exit() will not call the logics of `defer`
		os.Exit(1)
	}
	return token
}

// TODO: fix type for go-github client
func IsInitialCommit(repo string, client *github.Client, repoowner string, reponame string) bool {
	// Check commit histories of README.md file and return false if there is other commits
	fmt.Printf(">>> Getting commit history of %s ...\n", repo)

	// https://pkg.go.dev/github.com/google/go-github/github#RepositoriesService.ListCommits
	opt := &github.CommitsListOptions{Path: "./README.md"}
	commits, _, listerr := client.Repositories.ListCommits(context.Background(), repoowner, reponame, opt)
	if listerr != nil {
		fmt.Println("Failed to fetch list of commits")
		fmt.Println(listerr)
		return false
	}

	// ListCommits() result has pagenations by default with 30 from latest
	fmt.Printf("Found %v commits in repo with file %s\n", len(commits), opt.Path)
	if len(commits) != 1 {
		fmt.Println("There are several commits in the repo as below, seems not new repository and need not to initialize.")
		for _, commit := range commits {
			// https://pkg.go.dev/github.com/google/go-github/github#RepositoryCommit
			// https://pkg.go.dev/github.com/google/go-github/github#Commit
			fmt.Printf("commit: [ %s ]\n", commit.Commit.GetMessage())
		}
		return false
	}

	fmt.Println(">>> Checking the latest commit message of README")
	latest := commits[len(commits)-1]
	if latest.Commit.GetMessage() != "Initial commit" {
		fmt.Println("Seems that this repository was not generated by `hwakabh/.github` template, skipped the process")
		fmt.Printf("%s | %s\n", latest.GetSHA(), latest.Commit.GetMessage())
		return false
	}

	return true
}
